grammar -> { "dump" define | "assert" "(" assign ")" } $

assign -> ["inv"] ident "=" expression | 
          ["inv"] array "=" expression 
          
define -> ident "(" [ident] {"," ident } ")" block

block  -> statement | "{" statement  { statement } "}"

statement -> "assert" "(" ( assign | "return"  expression ) ")"  |   
             "if"     "(" expression ")" block ["else" block] |
             "while"  "(" expression ")" block |
             function

function -> (ident | "out" | "in") "(" [expression] {"," expression } ")"
              
array -> ident "[" expression "]"

expression -> logical {("||"|"&&") logical}

logical -> boolean [(">"|"<"|">="|"<="|"=="|"!=") boolean]

boolean -> [+|-] additive {(+|-) additive}

additive -> factor {("*"|"/") factor}

factor -> exponent ["^" exponent]

exponent -> number              | 
            ident               | 
            array               |
            function            |
            "!" exponent        |
            ("+"|"-") exponent  |

